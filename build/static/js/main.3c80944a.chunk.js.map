{"version":3,"sources":["components/list.component.jsx","components/date.component.jsx","components/plan.component.jsx","components/options.component.jsx","App.js","hooks/useLocalStorage.js","serviceWorker.js","index.js"],"names":["List","id","message","completed","removeListItem","editTodo","markAsComplete","onEnterNewField","className","type","defaultChecked","onClick","e","target","value","autoFocus","defaultValue","placeholder","onChange","onKeyDown","data-tip","size","DateComponent","taskData","setTasksdata","tasks","index","useState","lists","dateTasks","setDateTasks","updateTaskData","newFilteredTask","data","lastModified","Date","getTime","filter","task","forEach","tsk","addNewList","uuid","key","date","el","onDrop","addedIndex","removedIndex","map","length","Plan","daysAdded","setDaysAdded","newDateObject","nDate","moment","add","format","push","newData","Options","toggleMode","currentMode","href","src","width","alt","INITIAL_TASK","EmptyState","App","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useLocalStorage","setTasks","darkMode","useDarkMode","toggle","tid","place","effect","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yUAGe,SAASA,EAAT,GAAsG,IAAtFC,EAAqF,EAArFA,GAAIC,EAAiF,EAAjFA,QAASC,EAAwE,EAAxEA,UAAWC,EAA6D,EAA7DA,eAAgBC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,gBAC/F,OACA,wBAAIC,UAAWL,EAAY,iBAAmB,QAC7C,6BACFA,EAAY,2BAAOM,KAAK,WAAWC,eAAc,UAAKP,GAAaQ,QAAS,SAACC,GAAD,OAAON,EAAeL,EAAGW,EAAEC,OAAOC,UACzG,2BAAOL,KAAK,WAAYE,QAAS,kBAAML,EAAeL,MACtD,2BAAOc,WAAS,EAACN,KAAK,OAAOO,aAA0B,QAAZd,EAAoBA,EAAU,GAAIe,YAAyB,QAAZf,EAAoB,WAAa,eAAgBgB,SAAU,SAACN,GAAD,OAAOP,EAASJ,EAAIW,EAAEC,OAAOC,QAAQK,UAAWZ,KAExM,yBAAKC,UAAU,WACd,gCACC,kBAAC,IAAD,CAAQY,WAAS,SAASC,KAAK,KAAKV,QAAS,kBAAIP,EAAeH,SCPtD,SAASqB,EAAT,GAAkE,IAAzCC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,MAAS,EAC7CC,mBAASJ,EAASK,OAD2B,mBACxEC,EADwE,KAC7DC,EAD6D,KAGzEC,EAAiB,SAAAC,GACtBP,EAAMC,GAAOE,MAAQI,EACrBR,EAAa,CACZS,KAAMR,EACNS,cAAc,IAAIC,MAAOC,YAE1BN,EAAaE,IAQR5B,EAAiB,SAAAH,GACtB,IAAM+B,EAAkBH,EAAUQ,QAAO,SAAAC,GAAI,OAAIA,EAAKrC,KAAOA,KAC7D8B,EAAeC,IAGV3B,EAAW,SAACJ,EAAIC,GACrB2B,EAAUU,SAAQ,SAAAC,GACbA,EAAIvC,KAAOA,IACduC,EAAItC,QAAUA,MAGhB6B,EAAeF,IAKVY,EAAa,WAClB,IAAMT,EAAe,sBACjBH,GADiB,CAEpB,CACC5B,GAAIyC,MACJxC,QAAS,MACTC,WAAW,KAGb4B,EAAeC,IASV1B,EAAiB,SAAAL,GACtB4B,EAAUU,SAAQ,SAAAD,GACbA,EAAKrC,KAAOA,IACfqC,EAAKnC,WAAamC,EAAKnC,cAIzB4B,EAAeF,IAGVtB,EAAkB,SAACK,GACV,UAAVA,EAAE+B,KACLF,KAIF,OACC,yBAAKjC,UAAU,aACd,yBAAKA,UAAU,cACd,8BAAOe,EAASqB,MAChB,yBAAKpC,UAAU,WACd,gCACC,kBAAC,IAAD,CAAOa,KAAK,KAAKD,WAAS,aAAaT,QA5BzB,kBAClBa,EAAa,CACZS,KAAMR,EAAMY,QAAO,SAAAQ,GAAE,OAAIA,EAAGD,OAASrB,EAASqB,QAC9CV,cAAc,IAAIC,MAAOC,gBA2BvB,gCACC,kBAAC,IAAD,CAAahB,WAAS,aAAaT,QA7ClB,kBAAMoB,EAAe,KA6CqBV,KAAK,UAInE,4BACC,kBAAC,YAAD,CAAWyB,OArEC,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aAAmB,EACG,CAACnB,EAAUmB,GAAenB,EAAUkB,IAAtFlB,EAAUkB,GADqC,KACxBlB,EAAUmB,GADc,KAEhDjB,EAAeF,KAoEXA,EAAUoB,KAAI,SAAAX,GACd,OACC,kBAAC,YAAD,CAAWK,IAAKL,EAAKrC,IACpB,kBAACD,EAAD,iBACKsC,EADL,CAECK,IAAKL,EACLlC,eAAgBA,EAChBC,SAAUA,EACVC,eAAgBA,EAChBC,gBAAiBA,SAMC,IAArBsB,EAAUqB,QAAgB,wBAAI1C,UAAU,aAAaG,QAAS8B,GAApC,gCAC3B,wBAAIjC,UAAU,YACb,gCACC,kBAAC,IAAD,CAAMY,WAAS,WAAWT,QAAS8B,EAAYpB,KAAK,Y,YCrG5C,SAAS8B,EAAT,GAAwC,IAAxB1B,EAAuB,EAAvBA,MAAOD,EAAgB,EAAhBA,aAAgB,EAClBG,mBAAS,GADS,mBAC9CyB,EAD8C,KACnCC,EADmC,KAoBrD,OACC,yBAAK7C,UAAU,WAAf,YAEC,kBAAC,IAAD,CAAYY,WAAS,UAAUZ,UAAU,aAAaG,QAnBhC,SAAAC,GACvB,IAAM0C,EAAgB,GAEdC,EAAQC,MACbC,IAAKL,EAAW,QAChBM,OAAO,sBACTJ,EAAcK,KAAK,CAAEf,KAAMW,EAAO3B,MAAO,KACzCyB,EAAaD,EAAU,GAExB,IAAMQ,EAAU,CACf3B,KAAK,GAAD,mBAAMR,GAAU6B,GACpBpB,cAAc,IAAIC,MAAOC,WAG1BZ,EAAaoC,MAGb,O,YCtBa,SAASC,EAAT,GAA0D,IAAtCC,EAAqC,EAArCA,WAA2BhD,EAAU,EAAzBiD,YAAejD,MAC7D,OACC,yBAAKN,UAAU,WACb,uBAAGY,WAAS,cAAc4C,KAAK,8CAC/B,kBAAC,IAAD,CAAS3C,KAAK,QAGf,4BAASV,QAASmD,GACjBhD,EAAQ,yBAAMM,WAAS,aAAa6C,IAAI,kBAAmBC,MAAM,OAAOC,IAAI,aAAgB,yBAAK/C,WAAS,YAAY6C,IAAI,mBAAmBE,IAAI,aAAaD,MAAM,W,UCAlKE,EAAe,CACpBnC,KAAM,CACL,CACCW,KAAMY,MAASE,OAAO,sBACtB9B,MAAO,KAITM,aAAc,MAGTmC,EAAa,WAClB,OAAO,uBAAG7D,UAAU,UAAb,OAA0B,yBAAKyD,IAAI,oBAAoBC,MAAM,OAAOC,IAAI,SAAxE,qCAAmH,yBAAKF,IAAI,oBAAoBC,MAAM,OAAOC,IAAI,WA4B1JG,EAzBH,WAAO,IAAD,ECzBH,SAAyB3B,EAAK4B,GAAc,MAGnB5C,oBAAS,WAC7C,IAEE,IAAM6C,EAAOC,OAAOC,aAAaC,QAAQhC,GAEzC,OAAO6B,EAAOI,KAAKC,MAAML,GAAQD,EACjC,MAAOO,GAGP,OADAC,QAAQC,IAAIF,GACLP,MAZ8C,mBAGlDU,EAHkD,KAGrCC,EAHqC,KAiCzD,MAAO,CAACD,EAfS,SAAAnE,GACf,IAEE,IAAMqE,EACJrE,aAAiBsE,SAAWtE,EAAMmE,GAAenE,EAEnDoE,EAAeC,GAEfV,OAAOC,aAAaW,QAAQ1C,EAAKiC,KAAKU,UAAUH,IAChD,MAAOL,GAEPC,QAAQC,IAAIF,MDHSS,CAAgB,QAAQnB,GADjC,mBACV3C,EADU,KACH+D,EADG,KAEXC,EAAWC,aAAY,GAEtBlE,EAAe,SAACS,GAAD,OAAUuD,EAASvD,IAEzC,OACC,yBAAKzB,UAAU,OACd,yBAAKA,UAAU,cAEd,kBAACqD,EAAD,CAASC,WAAY2B,EAASE,OAAQ5B,YAAa0B,IAEnD,kBAACtC,EAAD,CAAM1B,MAAOA,EAAMQ,KAAMT,aAAcA,IAEtCC,EAAMQ,KAAKgB,KAAI,SAACX,EAAKZ,GACrB,OAAO,kBAAC,EAAD,CAAMD,MAAOA,EAAMQ,KAAMU,IAAKL,EAAKsD,IAAKrE,SAAUe,EAAMd,aAAcA,EAAcE,MAAOA,OAG5E,IAAtBD,EAAMQ,KAAKiB,QAAgB,kBAAC,EAAD,OAE5B,kBAAC,IAAD,CAAe2C,MAAM,SAASpF,KAAK,OAAOqF,OAAO,YEnC/CC,EAAcC,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BlC,QAAQC,IACN,iHAKEsB,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlB5B,QAAQC,IAAI,sCAGRsB,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAtC,GACLC,QAAQD,MAAM,4CAA6CA,MC1FjEuC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,GAAwBjD,OAAOwB,SAASjC,MACpD2D,SAAWlD,OAAOwB,SAAS0B,OAIvC,OAGFlD,OAAOmD,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMqB,GAAN,sBAEP3B,IAgEV,SAAiCM,EAAOC,GAEtCuB,MAAMxB,GACHK,MAAK,SAAAoB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM1B,MAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,MAAK,WAC7BjC,OAAOwB,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLrC,QAAQC,IACN,oEArFAuD,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM1B,MAAK,WACjC3B,QAAQC,IACN,iHAMJoB,EAAgBC,EAAOC,OCzC/BE,K","file":"static/js/main.3c80944a.chunk.js","sourcesContent":["import React from 'react';\nimport { Trash2 } from 'react-feather';\n\nexport default function List({ id, message, completed, removeListItem, editTodo, markAsComplete, onEnterNewField }) {\n \treturn (\n\t\t<li className={completed ? 'list completed' : 'list'}>\n\t\t\t<div>\n{completed ? <input type=\"checkbox\" defaultChecked={`${completed}`} onClick={(e) => markAsComplete(id,e.target.value)} />\n\t\t\t\t: <input type=\"checkbox\"  onClick={() => markAsComplete(id)} />}\n\t\t\t\t  <input autoFocus type=\"text\" defaultValue={message !== \"new\" ? message : ''} placeholder={message === \"new\" ? \"New ToDo\" : 'Edit Message'} onChange={(e) => editTodo(id, e.target.value)} onKeyDown={onEnterNewField} />\n\t\t\t</div>\n\t\t\t<div className=\"actions\">\n\t\t\t\t<button>\n\t\t\t\t\t<Trash2 data-tip=\"Delete\" size=\"13\" onClick={()=>removeListItem(id)} />\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</li>\n\t);\n}\n","import React, { useState } from 'react';\nimport { Trash, MinusSquare, Plus } from 'react-feather';\nimport uuid from 'uuid';\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport List from './list.component';\n\nexport default function DateComponent({ taskData, setTasksdata, tasks, index }) {\n\tconst [dateTasks, setDateTasks] = useState(taskData.lists);\n\n\tconst updateTaskData = newFilteredTask => {\n\t\ttasks[index].lists = newFilteredTask;\n\t\tsetTasksdata({\n\t\t\tdata: tasks,\n\t\t\tlastModified: new Date().getTime()\n\t\t});\n\t\tsetDateTasks(newFilteredTask);\n\t};\n\n\tconst onDrop = ({ addedIndex, removedIndex }) => {\n\t\t[dateTasks[addedIndex], dateTasks[removedIndex]] = [dateTasks[removedIndex], dateTasks[addedIndex]];\n\t\tupdateTaskData(dateTasks);\n\t};\n\n\tconst removeListItem = id => {\n\t\tconst newFilteredTask = dateTasks.filter(task => task.id !== id);\n\t\tupdateTaskData(newFilteredTask);\n\t};\n\n\tconst editTodo = (id, message) => {\n\t\tdateTasks.forEach(tsk => {\n\t\t\tif (tsk.id === id) {\n\t\t\t\ttsk.message = message;\n\t\t\t}\n\t\t});\n\t\tupdateTaskData(dateTasks);\n\t};\n\n\tconst clearListData = () => updateTaskData([]);\n\n\tconst addNewList = () => {\n\t\tconst newFilteredTask = [\n\t\t\t...dateTasks,\n\t\t\t{\n\t\t\t\tid: uuid(),\n\t\t\t\tmessage: 'new',\n\t\t\t\tcompleted: false\n\t\t\t}\n\t\t];\n\t\tupdateTaskData(newFilteredTask);\n\t};\n\n\tconst deleteDate = () =>\n\t\tsetTasksdata({\n\t\t\tdata: tasks.filter(el => el.date !== taskData.date),\n\t\t\tlastModified: new Date().getTime()\n\t\t});\n\n\tconst markAsComplete = id => {\n\t\tdateTasks.forEach(task => {\n\t\t\tif (task.id === id) {\n\t\t\t\ttask.completed = !task.completed;\n\t\t\t}\n\t\t});\n\n\t\tupdateTaskData(dateTasks);\n\t};\n\n\tconst onEnterNewField = (e) => {\n\t\tif (e.key === 'Enter') {\n\t\t\taddNewList();\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className=\"date-todo\">\n\t\t\t<div className=\"date-style\">\n\t\t\t\t<span>{taskData.date}</span>\n\t\t\t\t<div className=\"actions\">\n\t\t\t\t\t<button>\n\t\t\t\t\t\t<Trash size=\"14\" data-tip=\"Remove Day\" onClick={deleteDate} />\n\t\t\t\t\t</button>\n\t\t\t\t\t<button>\n\t\t\t\t\t\t<MinusSquare data-tip=\"Clear List\" onClick={clearListData} size=\"14\" />\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<ul>\n\t\t\t\t<Container onDrop={onDrop}>\n\t\t\t\t\t{dateTasks.map(task => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Draggable key={task.id}>\n\t\t\t\t\t\t\t\t<List\n\t\t\t\t\t\t\t\t\t{...task}\n\t\t\t\t\t\t\t\t\tkey={task}\n\t\t\t\t\t\t\t\t\tremoveListItem={removeListItem}\n\t\t\t\t\t\t\t\t\teditTodo={editTodo}\n\t\t\t\t\t\t\t\t\tmarkAsComplete={markAsComplete}\n\t\t\t\t\t\t\t\t\tonEnterNewField={onEnterNewField}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Draggable>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\n\t\t\t\t\t{dateTasks.length === 0 && <li className=\"empty-list\" onClick={addNewList}>You have not added any items</li>}\n\t\t\t\t\t<li className=\"new-list\">\n\t\t\t\t\t\t<button>\n\t\t\t\t\t\t\t<Plus data-tip=\"New Task\" onClick={addNewList} size=\"12\" />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</li>\n\t\t\t\t</Container>\n\t\t\t</ul>\n\t\t</div>\n\t);\n}\n","import React, { useState} from 'react';\nimport { PlusCircle } from 'react-feather';\n\nimport moment from 'moment';\n\nexport default function Plan({ tasks, setTasksdata }) {\n\tconst [daysAdded, setDaysAdded] =  useState(1);\n\n\n \tconst planAnotherDay = e => {\n\t\tconst newDateObject = [];\n\n \t\t\tconst nDate = moment()\n\t\t\t\t.add( daysAdded, 'days')\n\t\t\t\t.format('dddd, DD MMMM YYYY');\n\t\t\tnewDateObject.push({ date: nDate, lists: [] });\n\t\t\tsetDaysAdded(daysAdded+1);\n\n\t\tconst newData = {\n\t\t\tdata: [...tasks, ...newDateObject],\n\t\t\tlastModified: new Date().getTime()\n\t\t};\n\n\t\tsetTasksdata(newData);\n\t};\n\treturn (\n\t\t<div className=\"planner\">\n\t\t\tPlan next\n\t\t\t<PlusCircle data-tip=\"Add Day\" className=\"add-circle\" onClick={planAnotherDay} />\n\t\t\tday\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport {  GitHub } from 'react-feather';\n\n\nexport default function Options({  toggleMode, currentMode: { value }}) {\n\treturn (\n\t\t<div className=\"options\">\n\t\t\t <a data-tip=\"Source Code\" href=\"https://github.com/Pranathi1092/To-do-list\">\n\t\t\t\t<GitHub  size=\"16\" />\n\t\t\t </a>\n\n\t\t\t<button  onClick={toggleMode}>\n\t\t\t{value ? <img  data-tip=\"Light mode\" src=\"/assets/sun.svg\"  width=\"25px\" alt=\"day mode\" /> : <img data-tip=\"Dark mode\" src=\"/assets/moon.svg\" alt=\"night mode\" width=\"25px\" />}\n\t\t\t </button>\n\n\t\t</div>\n\t);\n}\n","import React   from 'react';\nimport ReactTooltip from 'react-tooltip'\nimport useDarkMode from 'use-dark-mode';\nimport moment from \"moment\";\n\nimport useLocalStorage from './hooks/useLocalStorage'\n\nimport Date from './components/date.component';\nimport Plan from './components/plan.component';\nimport Options from './components/options.component';\nimport './App.css';\n\nconst INITIAL_TASK = {\n\tdata: [\n\t\t{\n\t\t\tdate: moment().format('dddd, DD MMMM YYYY'),\n\t\t\tlists: [\n\t\t\t]\n\t\t}\n],\n\tlastModified: null\n}\n\nconst EmptyState = () => {\n\treturn <p className=\"center\">Wow <img src=\"./assets/tada.svg\" width=\"20px\" alt=\"tada\" /> You don't have any pending works <img src=\"./assets/clap.svg\" width=\"20px\" alt=\"clap\" /></p>\n}\n\nconst App = () => {\n\tconst [tasks, setTasks] = useLocalStorage('tasks',INITIAL_TASK);\n\tconst darkMode = useDarkMode(false);\n\n \tconst setTasksdata = (data) => setTasks(data);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"todo-lists\">\n\n\t\t\t\t<Options toggleMode={darkMode.toggle} currentMode={darkMode} />\n\n\t\t\t\t<Plan tasks={tasks.data} setTasksdata={setTasksdata}  />\n\n\t\t\t\t{tasks.data.map((task,index) => {\n\t\t\t\t\treturn <Date tasks={tasks.data} key={task.tid} taskData={task} setTasksdata={setTasksdata} index={index} />\n\t\t\t\t})}\n\n\t\t\t\t{tasks.data.length === 0 && <EmptyState />}\n \t\t\t</div>\n\t\t\t <ReactTooltip  place=\"bottom\" type=\"dark\" effect=\"solid\" />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { useState } from 'react';\n\nexport default function useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.register();\n"],"sourceRoot":""}